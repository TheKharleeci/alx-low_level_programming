!<arch>
0-isupper.o/    0           0     0     644     251       `
#include "main.h"

/**
 * _isupper - Checks if a character is uppercase.
 * @c: The character to be checked.
 *
 * Return: 1 if character is uppercase, 0 otherwise
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);
	else
		return (0);
}

0-memset.o/     0           0     0     644     351       `
#include "main.h"
/**
 * _memset - fills memory with a constant byte
 *
 * @s: pointer to memory area to fill
 * @b: the constant byte
 * @n: the number of bytes to fill
 *
 * Return: char (a pointer to the memory area)
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	for ( ; i < n; i++)
	{
		s[i] = b;
	}

	return (s);
}

0-strcat.o/     0           0     0     644     339       `
#include "main.h"

/**
 * _strcat - function that concatenates two strings
 *
 * @dest: first string
 * @src: second string
 * Return: char
 */
char *_strcat(char *dest, char *src)
{
	int strlen = 0;
	int i = 0;

	while (dest[strlen])
	{
		strlen++;
	}

	while (src[i])
	{
		dest[strlen] = src[i];
		strlen++;
		i++;
	}

	return (dest);
}

100-atoi.o/     0           0     0     644     224       `
#include "main.h"

/**
 * _atoi - a function that returns the length of a string
 * @s: the string param
 *
 * Return: int
 */
int _atoi(char *s)
{
	int strlen = 0;

	while (s[strlen])
	{
		strlen++;
	}

	return (strlen);
}
1-isdigit.o/    0           0     0     644     247       `
#include "main.h"

/**
 * _isdigit - Checks if a character is a digit.
 * @c: The character to be checked.
 *
 * Return: 1 if character is a digit, 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}

1-memcpy.o/     0           0     0     644     380       `
#include "main.h"
/**
 * _memcpy - fills memory with a constant byte
 *
 * @dest: the destination memory area
 * @src: the source memory area
 * @n: the number of bytes to fill
 *
 * Return: char (a pointer to the dest memory area)
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	for ( ; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}
1-strncat.o/    0           0     0     644     433       `
#include "main.h"

/**
 * _strncat - function that concatenates two strings to a limit
 *
 * @dest: first string
 * @src: second string
 * @n: the number of bytes from src
 * Return: char
 */
char *_strncat(char *dest, char *src, int n)
{
	int strlen = 0;
	int i;

	while (dest[strlen])
	{
		strlen++;
	}

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[strlen] = src[i];
		strlen++;
	}
	dest[strlen] = '\0';

	return (dest);
}

2-strchr.o/     0           0     0     644     340       `
#include "main.h"
#define NULL 0

/**
 * _strchr -  function that locates a character in a string
 * @s: the string
 * @c: the character to locate
 * Return: char (the first occurence of c)
 */
char *_strchr(char *s, char c)
{
	int i = 0;

	while (s[i] != '\0')
	{
		if (s[i] == c)
		{
			return (&(s[i]));
		}
		i++;
	}

	return (NULL);
}
2-strlen.o/     0           0     0     644     228       `
#include "main.h"

/**
 * _strlen - a function that returns the length of a string
 * @s: the string param
 *
 * Return: int
 */
int _strlen(char *s)
{
	int strlen = 0;

	while (s[strlen])
	{
		strlen++;
	}

	return (strlen);
}
2-strncpy.o/    0           0     0     644     373       `
#include "main.h"

/**
 * _strncpy - function that copies a string to another string
 *
 * @dest: first string
 * @src: second string
 * @n: the number of bytes from src
 * Return: char
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	for ( ; i < n; i++)
		dest[i] = '\0';

	return (dest);
}

3-islower.o/    0           0     0     644     252       `
#include "main.h"

/**
 * _islower - Checks if a character is lowercase.
 * @c: The character to be checked.
 *
 * Return: 1 if character is lowercase, 0 otherwise
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);
	else
		return (0);
}
3-puts.o/       0           0     0     644     216       `
#include "main.h"

/**
 * _puts - prints a string
 *
 * @str: the string to be printed
 *
 * Return: void
 */
void _puts(char *str)
{
	int i = 0;

	while (str[i])
	{
		_putchar(str[i]);
		i++;
	}

	_putchar('\n');
}
3-strcmp.o/     0           0     0     644     558       `
#include "main.h"

/**
 * _strcmp - function that compares two strings
 *
 * @s1: first string
 * @s2: second string
 * Return: int
 */
int _strcmp(char *s1, char *s2)
{
	int i;
	int first_str_len = 0;
	int second_str_len = 0;
	int min_len;

	while (s1[first_str_len])
	{
		first_str_len++;
	}

	while (s2[second_str_len])
	{
		second_str_len++;
	}
	if (second_str_len <= first_str_len)
		min_len = second_str_len;
	else
		min_len = first_str_len;
	for (i = 0; i < min_len; i++)
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
	}

	return (0);
}
3-strspn.o/     0           0     0     644     582       `
#include "main.h"

/**
 * _strspn - function that compares two strings
 *
 * @s: first string
 * @accept: second string
 * Return: unsigned int
 */
unsigned int _strspn(char *s, char *accept)
{
	int i;
	int first_str_len = 0;
	int second_str_len = 0;
	int min_len;

	while (s1[first_str_len])
	{
		first_str_len++;
	}

	while (s2[second_str_len])
	{
		second_str_len++;
	}
	if (second_str_len <= first_str_len)
		min_len = second_str_len;
	else
		min_len = first_str_len;
	for (i = 0; i < min_len; i++)
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
	}

	return (0);
}
4-isalpha.o/    0           0     0     644     314       `
#include "main.h"

/**
 * _isalpha- checks if a number is ASCII lowercase or uppercase
 * @c: the character to check
 * Return: 1 if character is lowercase or uppercase, 0 otherwise
 */
int _isalpha(int c)
{
	if (c >= 97 && c <= 122)
		return (1);
	else if (c >= 65 && c <= 90)
		return (1);
	else
		return (0);
}
4-strpbrk.o/    0           0     0     644     353       `
#include "main.h"
#define NULL 0

/**
 * _strpbrk -  function that locates a character in a string
 * @s: the string
 * @accept: the character to locate
 * Return: char (the first occurence of c)
 */
char *_strpbrk(char *s, char *accept)
{
	int i = 0;

	while (s[i] != '\0')
	{
		if (s[i] == c)
		{
			return (&(s[i]));
		}
		i++;
	}

	return (NULL);
}

5-strstr.o/     0           0     0     644     365       `
#include "main.h"
#define NULL 0

/**
 * _strstr -  function that locates a character in a string
 * @haystack: the string
 * @needle: the character to locate
 * Return: char (the first occurence of c)
 */
char *_strstr(char *haystack, char *needle)
{
	int i = 0;

	while (s[i] != '\0')
	{
		if (s[i] == c)
		{
			return (&(s[i]));
		}
		i++;
	}

	return (NULL);
}

6-abs.o/        0           0     0     644     221       `
#include "main.h"

/**
 * _abs- computes the absolute value of an integer
 * @n: the integer to be computed
 * Return: int
 */
int _abs(int n)
{
	if (n < 0)
	{
		n = n * (-1);
		return (n);
	}
	else
	{
		return (n);
	}
}

9-strcpy.o/     0           0     0     644     289       `
#include "main.h"

/**
 * _strcpy - copies a string to a buffer
 *
 * @dest: the buffer
 * @src: the string
 *
 * Return: char- the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int i = 0;

	while (src[i])
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';

	return (dest);
}

_putchar.o/     0           0     0     644     251       `
#include "main.h"

/**
 * main - Entry point
 *
 * Description: prints _putchar
 *
 * Return: 0 (Success)
 */
int main(void)
{
	char str[8] = "_putchar";
	int i = 0;

	for (i = 0; i < 8; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');

	return (0);
}

